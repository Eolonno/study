--1 задание
--Сформировать процедуру по примеру. Возвращаемое значение - кол-во строк выводимой таблицы
USE TMPAN_UNIVER;

CREATE PROCEDURE PSUBJECT
AS
BEGIN
	SELECT SUBJECT код, SUBJECT_NAME дисциплина, PULPIT кафедра FROM SUBJECT;
	DECLARE @COUNT INT = (SELECT COUNT(*) FROM SUBJECT);
	RETURN @COUNT;
END;

DECLARE @VAR INT;
EXEC @VAR = PSUBJECT;
PRINT('Кол-во строк в запросе: ' + CAST(@VAR AS NVARCHAR));

--2 задание
--Изменить процедуру psubject, чтобы она принимала два параметра
--@p VARCHAR(20) - подстрока кода, которая должна быть в выходной таблице
--@c INT - выходной параметр, равный кол-ву строк в выходной таблице

ALTER PROCEDURE PSUBJECT @P VARCHAR(20), @C INT OUTPUT
AS BEGIN
	SELECT SUBJECT код, SUBJECT_NAME дисциплина, PULPIT кафедра FROM SUBJECT WHERE SUBJECT LIKE '%' + @P + '%';
	SET @C = @@ROWCOUNT;
	DECLARE @COUNT INT = (SELECT COUNT(*) FROM SUBJECT);
	RETURN @COUNT;
END;

DECLARE @K INT,
		@R INT,
		@P VARCHAR(20);
EXEC @K = PSUBJECT @P = 'Э', @C = @R OUTPUT;
PRINT('Кол-во строк во всей таблице: ' + CAST(@K AS NVARCHAR));
PRINT('Кол-во строк в выходной таблице: ' + CAST(@R AS NVARCHAR));

--3 задание
--Изменить процедуру, чтобы она не имела выходного параметра и выводить информацию во временную таблицу

ALTER PROCEDURE PSUBJECT @P VARCHAR(20)
AS BEGIN
	SELECT SUBJECT код, SUBJECT_NAME дисциплина, PULPIT кафедра FROM SUBJECT WHERE SUBJECT LIKE '%' + @P + '%';
END;

CREATE TABLE #TMP(
	[SUBJECT] [char](10) NOT NULL,
	[SUBJECT_NAME] [varchar](100) NULL,
	[PULPIT] [char](20) NULL
)

INSERT #TMP EXEC PSUBJECT @P = 'Э';

SELECT * FROM #TMP;

--4 задание
--Создать процедуру для вставки строки с обработкой ошибок

CREATE PROCEDURE PAUDITORIUM_INSERT @A CHAR(20), @N VARCHAR(50), @C INT = 2, @T CHAR(10)
AS DECLARE @RC INT
BEGIN TRY
	INSERT INTO AUDITORIUM VALUES (@A, @N, @C, @T)
	SET @RC = 1
	RETURN @RC
END TRY
BEGIN CATCH
	PRINT 'ERROR NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR(6))
	PRINT 'ERROR MESSAGE: ' + ERROR_MESSAGE()
	PRINT 'ERROR SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR(6))
	PRINT 'ERROR STATE: ' + CAST(ERROR_STATE() AS VARCHAR(8))
	PRINT 'ERROR LINE: ' + CAST(ERROR_LINE() AS VARCHAR(8))
	IF ERROR_PROCEDURE() IS NOT NULL
		PRINT 'ERROR PROCEDURE: ' + ERROR_PROCEDURE()
	SET @RC = -1
	RETURN @RC
END CATCH
GO

DECLARE @RC INT = 0
EXEC @RC = PAUDITORIUM_INSERT @A = '213-1', @N = 'ЛК-К', @T = '213-1'
PRINT ('Результат: ' + CAST(@RC AS VARCHAR))
EXEC @RC = PAUDITORIUM_INSERT @A = '213-1', @N = 'ЛК-К', @T = '213-1'
PRINT ('Результат: ' + CAST(@RC AS VARCHAR))
GO

SELECT * FROM AUDITORIUM
GO

DROP PROCEDURE PAUDITORIUM_INSERT
GO

DELETE AUDITORIUM WHERE AUDITORIUM = '213-1'
GO

--5 задание
--Разработать процедуру для создания отчета с одним входным параметром для определения кода кафедры

CREATE PROCEDURE SUBJECT_REPORT @P CHAR(10)
AS DECLARE @RC INT = 0
BEGIN TRY
	DECLARE @SUB CHAR(20), @SUBS CHAR(300) = ''
	DECLARE SUB_CUR CURSOR FOR SELECT SUBJECT FROM SUBJECT WHERE PULPIT = @P
	IF NOT EXISTS (SELECT SUBJECT FROM SUBJECT WHERE PULPIT = @P)
		RAISERROR('Ошибка в параметрах', 11, 1)
	ELSE
		OPEN SUB_CUR
		FETCH SUB_CUR INTO @SUB
		PRINT 'Предметы: '
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @SUBS = RTRIM(@SUB) + ', ' + @SUBS
			SET @RC = @RC + 1
			FETCH SUB_CUR INTO @SUB
		END
		PRINT @SUBS
		CLOSE SUB_CUR
		DEALLOCATE SUB_CUR
		RETURN @RC
END TRY
BEGIN CATCH
	PRINT ERROR_MESSAGE();
	IF ERROR_PROCEDURE() IS NOT NULL
		PRINT 'ERROR PROCEDURE: ' + ERROR_PROCEDURE()
	DEALLOCATE SUB_CUR
	RETURN @RC
END CATCH
GO

DECLARE @RC INT
EXEC @RC = SUBJECT_REPORT @P = 'ПОиСОИ'
PRINT 'Кол-во предметов: ' + CAST(@RC AS VARCHAR(3))
GO

DECLARE @RC INT
EXEC @RC = SUBJECT_REPORT @P = 'sdlfk'
PRINT 'Кол-во предметов: ' + CAST(@RC AS VARCHAR(3))

--6 задание
--Создать процедуру, которая будет выполнять вставку строки в таблицу с использованием другой процедуры

CREATE PROCEDURE PAUDITORIUM_INSERTX @A CHAR(20), @N VARCHAR(50), @C INT = 2, @T CHAR(10), @TN VARCHAR(50)
AS DECLARE @RC INT
BEGIN TRY
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRAN
	INSERT INTO AUDITORIUM_TYPE VALUES (@N, @TN);
	EXEC @RC = PAUDITORIUM_INSERT @A = @A, @N = @N, @T = @T;	
	COMMIT TRAN;
	RETURN 1;
END TRY
BEGIN CATCH
	PRINT 'ERROR NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR(6))
	PRINT 'ERROR MESSAGE: ' + ERROR_MESSAGE()
	PRINT 'ERROR SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR(6))
	PRINT 'ERROR STATE: ' + CAST(ERROR_STATE() AS VARCHAR(8))
	PRINT 'ERROR LINE: ' + CAST(ERROR_LINE() AS VARCHAR(8))
	IF ERROR_PROCEDURE() IS NOT NULL
		PRINT 'ERROR PROCEDURE: ' + ERROR_PROCEDURE()
	SET @RC = -1
	ROLLBACK;
	RETURN @RC
END CATCH
GO

DECLARE @RC INT = 0
EXEC @RC = PAUDITORIUM_INSERTX @A = '213-1', @N = 'П-А', @T = '213-1', @TN = 'Просто аудитория';
PRINT ('Результат: ' + CAST(@RC AS VARCHAR))
EXEC @RC = PAUDITORIUM_INSERTX @A = '213-1', @N = 'П-А', @T = '213-1', @TN = 'Просто аудитория';
PRINT ('Результат: ' + CAST(@RC AS VARCHAR))
GO

DELETE AUDITORIUM WHERE AUDITORIUM = '213-1'
DELETE AUDITORIUM_TYPE WHERE AUDITORIUM_TYPENAME = 'Просто аудитория';
GO

DROP PROCEDURE PAUDITORIUM_INSERTX;

--7 задание
--Хранимые процедуры для своей БД

USE An_MyBase;

--Кол-во преподавателей
CREATE PROCEDURE TEACHERS_COUNT
AS BEGIN
	DECLARE @COUNT INT; 
	SET @COUNT = (SELECT COUNT(*) FROM Преподаватели);
	RETURN @COUNT;
END;

DECLARE @COUNT INT;
EXEC @COUNT = TEACHERS_COUNT;
PRINT 'Кол-во преподавателей: ' + CAST(@COUNT AS NVARCHAR);

DROP PROCEDURE TEACHERS_COUNT;

--Добавление группы
CREATE PROCEDURE GROUP_ADDING @SPEC NVARCHAR(20), @COUNT INT, @CODE INT
AS BEGIN TRY
	INSERT INTO Группы(Специальность, [Количество студентов], [Код курса]) VALUES (@SPEC, @COUNT, @CODE);
END TRY
BEGIN CATCH
	PRINT 'ERROR NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR(6))
	PRINT 'ERROR MESSAGE: ' + ERROR_MESSAGE()
	PRINT 'ERROR SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR(6))
	PRINT 'ERROR STATE: ' + CAST(ERROR_STATE() AS VARCHAR(8))
	PRINT 'ERROR LINE: ' + CAST(ERROR_LINE() AS VARCHAR(8))
	IF ERROR_PROCEDURE() IS NOT NULL
		PRINT 'ERROR PROCEDURE: ' + ERROR_PROCEDURE()
END CATCH

EXEC GROUP_ADDING @SPEC = 'Специальность 1', @COUNT = 15, @CODE = 1;

DELETE Группы WHERE Специальность = 'Специальность 1';

--8 задание
USE TMPAN_UNIVER;

CREATE VIEW [VREPORT] 
AS 
SELECT DISTINCT F.FACULTY, P.PULPIT, COUNT(T.TEACHER)[КОЛИЧЕСТВО_ПРЕПОДАВАТЕЛЕЙ] FROM FACULTY F INNER JOIN PULPIT P
ON F.FACULTY = P.FACULTY
INNER JOIN TEACHER T
ON P.PULPIT = T.PULPIT
GROUP BY F.FACULTY, P.PULPIT
--DROP VIEW VREPORT

CREATE PROCEDURE PRINT_REPORT @F CHAR(10) = NULL, @P CHAR(20) = NULL
AS
DECLARE @RC INT = 0;
DECLARE @TF CHAR(10) ='', @TP CHAR(20) = '', @CT INT = 0, @RS CHAR(200) ='', @TS CHAR(20) = '';
BEGIN TRY
	IF(@F IS NOT NULL AND @P IS NOT NULL) -- Определение кафедры на факультете
		BEGIN
			DECLARE INFO CURSOR LOCAL FOR
			SELECT * FROM VREPORT WHERE FACULTY = @F AND PULPIT = @P
			DECLARE SUBS CURSOR LOCAL FOR 
			SELECT SUBJECT FROM SUBJECT WHERE PULPIT = @P;
			OPEN INFO;
			FETCH INFO INTO @TF, @TP, @CT;
			IF (@TF IS NULL OR @TF = '') 
				RAISERROR('Ошибка в параметрах', 11,1);
			PRINT 'Факультет: ' + @F;
			PRINT REPLICATE(' ',4)+'Кафедра: ' + @P
			PRINT REPLICATE(' ',8)+'Кол-во преподавателей: ' + CAST(@CT AS CHAR(2))
				OPEN SUBS;
				FETCH SUBS INTO @TS;
				WHILE @@FETCH_STATUS = 0
					BEGIN
						SET @RS = RTRIM(@TS) + ',' + @RS
						FETCH SUBS INTO @TS;
					END
				CLOSE SUBS
				SET @RS = SUBSTRING(@RS,0,LEN(@RS)) + '.'
				PRINT REPLICATE(' ',8)+'Дисциплины: ' + @RS
			CLOSE INFO;
			SET @RC = 1;
		END

	IF(@F IS NOT NULL AND @P IS NULL) -- все кафедры на факультете
		BEGIN
			DECLARE INFO CURSOR LOCAL FOR
			SELECT * FROM VREPORT WHERE FACULTY = @F
			DECLARE SUBS CURSOR LOCAL FOR 
			SELECT SUBJECT, PULPIT FROM SUBJECT;
			OPEN INFO;
			
			FETCH INFO INTO @TF, @P, @CT;
			IF (@TF IS NULL OR @TF = '') 
				RAISERROR('Ошибка в параметрах', 11,1);
			PRINT 'Факультет: ' + @F;
			WHILE @@FETCH_STATUS = 0
			BEGIN
				PRINT REPLICATE(' ',4)+'Кафедра: ' + @P
				PRINT REPLICATE(' ',8)+'Кол-во преподавателей: ' + CAST(@CT AS CHAR(2))
				OPEN SUBS;
				FETCH SUBS INTO @TS, @TP;
				WHILE @@FETCH_STATUS = 0
					BEGIN
					IF(@TP = @P) SET @RS = RTRIM(@TS) + ',' + @RS
					FETCH SUBS INTO @TS, @TP;
					END
				CLOSE SUBS;
				SET @RS = SUBSTRING(@RS,0,LEN(@RS)) + '.'
				PRINT REPLICATE(' ',8)+'Дисциплины: ' + @RS
				SET @RS = '';
				SET @RC +=1 
				FETCH INFO INTO @TF, @P, @CT;
			END
			CLOSE INFO;
		END
		
	IF(@F IS NULL AND @P IS NOT NULL) -- Определенная кафедра и неопределенный факультет
		BEGIN
			DECLARE INFO CURSOR LOCAL FOR
			SELECT * FROM VREPORT WHERE PULPIT = @P
			DECLARE SUBS CURSOR LOCAL FOR 
			SELECT SUBJECT FROM SUBJECT WHERE PULPIT = @P;
			OPEN INFO;
			FETCH INFO INTO @F, @TP, @CT;
			IF (@TF IS NULL OR @TF = '') 
				RAISERROR('Ошибка в параметрах', 11,1);
			PRINT 'Факультет: ' + @F;
			PRINT REPLICATE(' ',4)+'Кафедра: ' + @P
			PRINT REPLICATE(' ',8)+'Кол-во преподавателей: ' + CAST(@CT AS CHAR(2))
				OPEN SUBS;
				FETCH SUBS INTO @TS;
				WHILE @@FETCH_STATUS = 0
					BEGIN
						SET @RS = RTRIM(@TS) + ',' + @RS
						FETCH SUBS INTO @TS;
					END
				CLOSE SUBS
				SET @RS = SUBSTRING(@RS,0,LEN(@RS)) + '.'
				PRINT REPLICATE(' ',8)+'Дисциплины: ' + @RS
			CLOSE INFO;
			SET @RC = 1;
		END
	IF(@F IS NULL AND @P IS NULL) -- Непределенные кафедра и факультет
		RAISERROR ('Нет данных для отчета', 11,1);
	
	RETURN @RC;
END TRY
BEGIN CATCH
	PRINT 'ERROR NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR(6))
	PRINT 'ERROR MESSAGE: ' + ERROR_MESSAGE()
	PRINT 'ERROR SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR(6))
	PRINT 'ERROR STATE: ' + CAST(ERROR_STATE() AS VARCHAR(8))
	PRINT 'ERROR LINE: ' + CAST(ERROR_LINE() AS VARCHAR(8))
	IF ERROR_PROCEDURE() IS NOT NULL
		PRINT 'ERROR PROCEDURE: ' + ERROR_PROCEDURE()
END CATCH

EXEC PRINT_REPORT 'ИТ', NULL

DROP PROCEDURE PRINT_REPORT